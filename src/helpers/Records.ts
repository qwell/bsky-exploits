import { Collection } from '../lib/bsky/Collection';
import { DID } from '../lib/bsky/DID';
import { RecordKey } from '../lib/bsky/RecordKey';

import * as XRPC from './XRPC';

/* Untested and incomplete
export function applyWrites<T>(
  authToken: string,
  repo: DID,
  items: (
    | {
        action: 'create';
        collection: Collection;
        value: unknown;
      }
    | {
        action: 'update';
        collection: Collection;
        rkey: RecordKey;
        value: unknown;
      }
    | {
        action: 'delete';
        collection: Collection;
        rkey: RecordKey;
      }
  )[]
): unknown {
  throw new Error('Not implemented.');

  const result = XRPC.procedure('com.atproto.repo.applyWrites', authToken, {
    repo,
    items,
  });

  return result;
}
*/

export async function getRecord<T>(
  authToken: string,
  repo: DID,
  collection: Collection,
  rkey: RecordKey
): Promise<{
  repo: DID;
  collection: Collection;
  key: RecordKey;
  record: T;
}> {
  const result = (await XRPC.query('com.atproto.repo.getRecord', authToken, {
    repo,
    collection,
    key: rkey,
  })) as {
    repo: DID;
    collection: Collection;
    key: RecordKey;
    record: T;
  };

  return {
    repo: result.repo,
    collection: result.collection,
    key: result.key,
    record: result.record,
  };
}

export async function createRecord<T>(
  authToken: string,
  repo: DID,
  collection: Collection,
  record: T
): Promise<{ cid: string; uri: string }> {
  const result = (await XRPC.procedure('com.atproto.repo.createRecord', authToken, {
    repo,
    collection,
    record,
  })) as { cid: string; uri: string };

  return result;
}

/* Untested */
export async function putRecord<T>(
  authToken: string,
  repo: DID,
  collection: Collection,
  key: RecordKey,
  record: T
): Promise<{ cid: string; uri: string }> {
  const result = (await XRPC.procedure('com.atproto.repo.putRecord', authToken, {
    repo,
    collection,
    key,
    record,
  })) as { cid: string; uri: string };

  return result;
}

/* Untested */
export async function deleteRecord(authToken: string, repo: DID, collection: Collection, key: RecordKey) {
  await XRPC.procedure('com.atproto.repo.deleteRecord', authToken, {
    repo,
    collection,
    key,
  });
}
